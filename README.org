#+title:    Flow Type Coverage Demo
#+author:   Logan Barnett
#+email:    logustus@gmail.com
#+date:     <2018-11-26 Mon>
#+language: en
#+tags:     flow

Using Flow has been wonderful, but as part of using it in anger many of us have
seen its warts. One particularly nasty set of warts all relates to how a
particular variable can become typed as =any=. Once a variable is typed as
=any=, Flow is basically being told to _completely ignore_ the variable. Since
Flow is meant to be an incremental type system that is added to legacy
JavaScript projects in piecemeal this can be very helpful. However it can be
alarming when you see the various ways you can easily get Flow into a state
where it silently ignores segments of your code.

TODO - Provide links to tickets to these issues.

* When does it happen?
  This outlines when Flow just coerces a particular identifier to =any=. In
  these cases it will never tell you explicitly that it has done this. You will
  get no warnings, and your build pipeline will pass as if nothing was wrong.

** Exception in a try/catch

*** The problem
    Exception variables listed in the =catch= section are implicitly typed as
    =any=. See [[./try.js]].
*** The fix
    Using [[https://github.com/LoganBarnett/error-as-either][error-as-either]] accepts a function that might throw an error, and
    provides an "Either" type back, which is basically the result or the error.
    Flow will force you to figure out what you're looking at before you move on.
    Generally speaking this should make other things easier since Eithers are
    easier to compose than =throw=.

** Importing

*** The problem
    If you =import= or =require= from a file missing the =// @flow= annotation,
    the import result will be of type =any=. See [[./import.js]] and
    [[./non-flow.js]] for an example.

*** The fix
    There is an =eslint= plugin for Flow and a rule called
    [[https://github.com/gajus/eslint-plugin-flowtype#require-valid-file-annotation][require-valid-file-annotation]] which will enforce that you files have a
    *correct* Flow annotation at the top of each of your files. It will even
    detect typos such as =// @floww=.

** window and global

*** The problem
    =window= for browser JavaScript and =global= for Node.JS both are typed as
    =any= out of the box. See [[./window.js]] for an example.

*** The fix
    (TODO - add more details)

    Add a custom type for your own =window= or =global= that covers your needs.
    Be careful about typing things that get assigned at some point but aren't
    immediately available. It's more sound to treat these as Maybe types
    instead.

** JSON.parse
   (TODO flesh out)

*** The problem
    =JSON.parse= returns an =any= instead of =mixed= or some form of it.

** Server
   (TODO flesh out)

** Switch and unions with incorrect sentinel properties
   A very common pattern in Flow is to do a =switch= or even an =if= statement
   on a union that all shares one property. Check to see what the property is,
   and inside the =case= or =if= statement, the type of the thing being checked
   will be the specific type.

*** the problem

    If you use a value that doesn't exist in the union, or make a typo of that
    value, it will refine the type of the union to =any=. This gotcha appears to
    apply to =switch= and not =if=.

    See [[./missing-sentinel-value.js]] for an example.

*** the fix

    The issue here is only solvable by using =if= exclusively. This might be
    very undesirable because you can lose exhaustion - in other words, having
    Flow produce an error if the =switch= doesn't check all possible scenarios.

    See [[General issues with any]] for a less discipline based fix. The gist is it
    involves adding type coverage checks to your type checks.

** =instanceof=
*** Fails to flag error when type comparison is invalid

    In JavaScript it's frequent to use =instanceof= as a means of checking at
    runtime if a particular variable is represented by a known class or
    prototype. In Flow you can use =instanceof= to refine the type of a
    variable. You have code such as this:

    #+begin_src js

      function foo(x: mixed) {
        if(x instanceof String) {
          return x.toUpperCase() // Here you can treat x as a string.
        } else {
          return ''
        }
      }
    #+end_src

    Inside of the =if= body, =x= can be treated as a =String= because its type
    has been refined by the =if(x instanceof String)= check.

**** the problem

     If you do an =instanceof= comparison on an invalid comparison, Flow loses
     type information instead of refining it, or showing an error.

     See [[./instanceof.js]] for an example.

     Flow issue [[https://github.com/facebook/flow/issues/2282][2282]] tracks this problem.

**** the fix

     This is yet another case where Flow simply coerces the variable to =any=
     silently. You'll want type coverage checking to prove that this has not
     happened to you. In order to actually fix the problem once you've detected
     it, you'll need to make sure the type you're comparing with =instanceof= is
     part of the union.

     Checking for errors thrown is a common use case:

    #+begin_src js

      function getErrorReason(e: mixed | Error) {
        if(e instanceof Error) {
          return e.message
        } else {
          return String(e)
        }
      }
    #+end_src

** General issues with any

*** The problem
    There's a variety of ways for Flow to determine something should be =any=.
    They aren't obvious when it happens, and the enumerated cases above aren't
    necessarily exhaustive.

*** The fix

    [[https://github.com/rpl/flow-coverage-report][flow-coverage-report]] provides tooling you can add alongside running =flow
    status= or =flow check= that can be configured to fail on some threshold of
    uncovered code (100% coverage will enforce that =any= is never used).

    Various linter integrations with text editors also allow for not only
    showing Flow errors but also missing type coverage (sometimes this is a
    separate linter plugin). In the future this repo might have a community
    maintained list of plugin listings and configurations to get you started
    quickly.
